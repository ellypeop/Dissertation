@startuml
title VQE Algorithm - Class Diagram

class SparsePauliOp {
    +num_qubits: int[0...1]{unique, unordered}
    +from_list(List[Tuple[PauliList: String, coefficients: Complex]]): SparsePauliOp
    +apply_layout(layout: TranspileLayout): SparsePauliOp
}

class EfficientSU2 {
    +layout: TranspileLayout[0...1]{unique, unordered}
    +num_parameters: int
    +decompose(): EfficientSU2
    +draw(output: String, idle_wires: Boolean, style: String): Figure
}

class NumPyndarray {
    +pi: numpy.float64
    +random.random(size: num_parameters): numpy.ndarray
}

class Minimize {
    +fun: CostFunction
    +x0: NumPyndarray
    +args: Tuple[ansatz: EfficentSU2, hamiltonian: SparsePauliOp, estimator: EstimatorV2][3]{unique, ordered}
    +method: String
    +res.x: numpy.ndarray
    +res.nfev: int
    +res(fun: CostFunction, x0: NumPyndarray, args:  Tuple[ansatz: EfficentSU2, hamiltonian: SparsePauliOp, estimator: EstimatorV2], method: String): OptimizeResult
}


class EstimatorV2 <<Quantum>> {
    +mode: Session
    +run(pub: Tuple[ansatz: EfficientSU2, hamiltonian: List[SparsePauliOp], params: List[NumPyndarray]]): RuntimeJobV2
    +options.default_shots(default_shots: int)
}

class CostFunction <<Quantum Request>> {
    +cost_history_dict: Dict
    +pub: Tuple[ansatz: EfficientSU2, hamiltonian: List[SparsePauliOp], params: List[NumPyndarray]]
    +result: PrimitiveResult
    +energy: numpy.float64
    +cost_func(params: numpy.ndarray, ansatz: EfficentSU2, hamiltonian: SparsePauliOp, estimator: EstimatorV2): numpy.float64
}

 Minimize --> CostFunction: pass cost function <
 Minimize --> NumPyndarray: pass params <
 Minimize --> EfficientSU2: pass ansatz <
 Minimize --> SparsePauliOp: pass hamiltonian <
 Minimize --> EstimatorV2: pass estimator <
@enduml
